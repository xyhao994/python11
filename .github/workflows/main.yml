name: CI/CD Docker
# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ main ]
# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/python11
  VERSION: ${{ github.sha }}
  NAME: go_cicd
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # - run: docker compose up -d
      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.XYHAO994 }}
      - name: Build and push Docker images
        id: nginx_build
        uses: docker/build-push-action@v5
        with:
          context: ./NGINX
          file: ./NGINX/dev.Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}/nginx:latest
      - name: Build and push Docker images
        id: web_build
        uses: docker/build-push-action@v5
        with:
          context: ./WEB
          file: ./WEB/dev.Dockerfile
          # builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}/web-front:latest
  # 배포 Job
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, label-go ] # AWS ./configure에서 사용할 label명
    steps:
      - uses: actions/checkout@v4
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.XYHAO994 }}
      - name: Docker run web-front
        run: |
          docker network disconnect test_network web-front && docker network disconnect test_network nginx && docker network rm test_network
          docker network create --driver=bridge test_network
      - name: Docker run web-front
        run: |
          docker stop web-front && docker rm web-front && docker rmi ${{ env.DOCKER_IMAGE }}/web-front:latest
          docker run -d -p 8080:80 -v ./WEB/html:/usr/local/apache2/htdocs \
          --name web-front --net=test_network --restart always ${{ env.DOCKER_IMAGE }}/web-front:latest
      - name: Docker run nginx
        run: |
          docker stop nginx && docker rm nginx && docker rmi ${{ env.DOCKER_IMAGE }}/nginx:latest
          docker run -d -p 80:80 -v ./NGINX/logs:/var/log/nginx \
          --name nginx --net=test_network --restart always ${{ env.DOCKER_IMAGE }}/nginx:latest





